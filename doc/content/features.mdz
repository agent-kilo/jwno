{:title "Features"
 :author "Chibidou"
 :template "main.html"
 :order 2}
---

In general, Jwno works as a @em{keyboard driven} @link[https://en.wikipedia.org/wiki/Tiling_window_manager]{tiling window manager}. When a new window shows up, it tries to transform the window so it fits in the layout you defined. You can then use customized key bindings to modify the layout or manipulate your windows, rather than drag things around using the mouse. But, since a powerful generic @link[https://janet-lang.org/]{scripting engine} is built-in, you can literally do anything with it.

Jwno is still in active development, but it already has many desirable features.

@html```
<div class="row feature-list">

<div class="four columns">
```

#### ü™∂ Super lightweight.

Please, go to the @link[https://github.com/agent-kilo/jwno/releases]{download page} and check out the file size. And maybe click on the download link while you're there üòé.

@html```
</div>

<div class="four columns">
```

#### üíº Single portable executable.

Just grab the exe and you are good to go.

@html```
</div>

<div class="four columns">
```

#### ü§ó Non-intrusive.

Jwno only changes the layout or moves your windows when you tell it to. It works well with native window management provided by the operating system.

@html```
</div>

</div>
```

@html```
<div class="row feature-list">

<div class="six columns">
```

#### üñ•Ô∏è Native virtual desktops.

It's designed to work with native Windows @link[https://support.microsoft.com/en-us/windows/multiple-desktops-in-windows-36f52e38-5b4a-557b-2ff9-e1a60c976434]{virtual desktops}.

@html```
</div>

<div class="six columns">
```

#### üëæ Hackable REPL.

Like most Lisp systems, Jwno has REPL support. You can hack it while it's still running ü§ò.

@html```
</div>

</div>
```

@html```
<div class="row feature-list">

<div class="twelve columns">
```

#### ü™Ñ Highly customizable.

You can implement custom commands and hooks to trigger. It's even possible to call native Win32 APIs in your own implementations. For example, to always move a Notepad window to the @code{(100, 100)} coordinates on your screen(s), using the low-level @link[https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos]{SetWindowPos} function:

@codeblock[janet]```
(use jw32/_winuser)
(:add-hook (in jwno/context :hook-manager) :filter-window
   (fn [hwnd _uia exe _decktop]
     (if (string/has-suffix? "\\notepad.exe" exe)
       (do
         (SetWindowPos hwnd nil 100 100 500 500
                       (bor SWP_NOZORDER SWP_NOACTIVATE))
         false)
       true)))
```

@html```
</div>

</div>
```

@html```
<div class="row feature-list">

<div class="twelve columns">
```

#### ‚å®Ô∏è Powerful key binding system.

It supports @em{multi-level} and @em{transient} keymaps. For example, this defines a multi-level keymap:

@codeblock[janet]```
(:define-key keymap "Win + Enter  A" :command1)
(:define-key keymap "Win + Enter  B" :command2)
```

To run @code{:command1}, one should press @code{Win + Enter}, and then the @code{A} key. To run @code{:command2}, press @code{Win + Enter} followed by @code{B} key instead. The code above essentially "groups" @code{:command1} and @code{:command2} under @code{Win + Enter}.

@html```
</div>

</div>
```

@html```
<div class="row feature-list">

<div class="twelve columns">
```

#### üí°Ô∏è Easy interaction with GUIs using your keyboard.

With Jwno's @em{UI hint} feature, you can convert most of your mouse operations to simple keystrokes.

@html```
<div class="figure">
  <a href="./img/ui-hint-demo.gif">
    <img alt="Clicking a link using UI hint." src="./img/ui-hint-demo.gif">
  </a>
  <p class="caption">Clicking a link using UI hint.</p>
</div>
```

@html```
</div>

</div>
```

@html```
<div class="row feature-list">

<div class="twelve columns">
```

#### ‚ú® ...And there are more to come!

Please support Jwno's development by using it and giving some feedback. If you're interested, head over to the @link[installation/index.html]{installation guide}.

@html```
</div>

</div>
```
